# copyright 2013 J. Maurice <j@wiz.biz>

require '../../..'
require '../../../crypto/otp'
require './base'

wiz.package 'wiz.framework.http.account.authenticate.yubikeyhotp'

# Example YubiKey HOTP authentication request:
#
# POST /account/authenticate/yubikeyhotp
#
#	{
#		"leetcode" : "PPPPXXXXXXXXYYYYYYYY" // 20 digit code generated by yubikey token:
#											// P = 4 digit leetcode prefix
#											// X = 8 digit yubikey serial number
#											// Y = 8 digit hotp code
#	}
#

class wiz.framework.http.account.authenticate.yubikeyhotp extends wiz.framework.http.account.authenticate.base

	handler: (req, res) => #{{{
		# fail if no leetcode given
		return @fail(req, res, 'missing parameters') if not req.body?.leetcode?
		# fail if invalid leetcode given
		return @fail(req, res, 'invalid leetcode') if not wiz.framework.util.strval.leetcode_valid(req.body.leetcode)

		try # split keyID and userOTP out of leetcode string using regex
			r = /^1337(\d{8})(\d{8})$/
			leetcode = r.exec(req.body.leetcode)
			keyID = leetcode[1]
			userOTP = leetcode[2]
		catch e
			return @error req, res, "leetcode error: #{e}"

		# get accountID and accountOTP data for matching keyID
		req.server.root.accountDB.otpkeys.findAcctByYubiID req, res, keyID, (req, res, accountID, accountOTP) =>

			# fail if no matching account is found
			return @fail(req, res, 'no such account') if not accountID or not accountOTP

			# get yubikey secret/counter from otpkeys database
			secret = new Buffer(accountOTP.secret16, 'hex')
			counter = accountOTP.counter10

			# validate given yubikey leetcode is correct
			validation = wiz.framework.crypto.otp.validateHOTP(secret, counter, userOTP)

			# fail if validation doesnt pass
			return @fail(req, res, 'otp incorrect') if validation.result isnt true

			# query full account object
			req.server.root.accountDB.accounts.findOneByID req, res, accountID, (req, res, account) =>

				# fail if account object cant be retrieved
				return @fail(req, res, 'no such account') if not account

				console.log 'offset is '+validation.offset
				# increment hotp counter in otpkeys database
				req.server.root.accountDB.otpkeys.otpIncrementCounter req, res, account, keyID, validation.offset, (result) =>

					# pass account object to success callback
					return @onAuthenticateSuccess(req, res, account)
	#}}}

	fail: (req, res, err) => #{{{
		res.send 400, 'yubikey authentication failure', err
	#}}}
	error: (req, res, err) => #{{{
		res.send 500, 'yubikey authentication error', err
	#}}}

# vim: foldmethod=marker wrap
