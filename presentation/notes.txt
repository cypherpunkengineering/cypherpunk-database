As a software consultant, I write web applications for various customers, but I often need to implement the same things over and over, I made my own framework to do the common tasks in an intelligent way.

Goal: maximize re-use of code

- Spend less time writing "building blocks", instead use existing "building blocks" together to build application
- Improving quality of the framework improves the quality of all applications using it
- Look and feel of the UI is similar throughout the application, and across other applications developed using the same framework

Other effects of code re-use
- Decrease development time
- Increase security
- Increase feature set
- Increase performance
- Reduce bugs

Ideal use cases
- management webapp: wizfrontend -> wizbackend (manager -> many nodes)
- api webapp: many nodes of (wizfrontend -> database node)

basic webapp functionality
- server logging with crash/error notification
- dynamic navigation generation
- session handling
- string localization

basic webapp security
- sniffing cookie over insecure wifi etc.
- don't send cookie over http, only redirect to https
- send cookie over https with SECURE flag set
- for SQL databases, wrap SQL queries in injection-preventing code

desired features
- modular design (implemented)
after initial app sale to customer, need ability to sell more modules over time with additional functionality that integrate seamlessly into existing framework

- automated testing (planned)
before releasing new versions of software to customer, start app in test mode and run automated testcases, fix any bugs, repeat

- clustering / load balancing (planned)
build in load balancing to child nodes

framework structure
root
--- modules
----- resources
--------- methods
